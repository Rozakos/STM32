//byte pinMap[32] = {PA_11,PA_10,PA_9,PA_8,PC_9,PC_7,PC_6,PC_5,PB_0,PC_4,PC_3,PA_7,PA_6,PA_5,PB_5,PB_6,PB_14,PB_13,PB_12,PB_11,PB_15,PB_10,PB_2,PB_1};
//   1      2     3    4   5     6    7     8   9   10   11   12   13   14   15   16   17    18    19    20    21    22    23   24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44

//TO SWSTO BYTEMAP
//byte pinMap[32] = {PB_6, PB_5, PA_5, PA_6, PA_7, PC_3, PC_4, PB_0, PC_5, PC_6, PC_7, PC_9, PA_8, PA_9, PA_10, PA_11, PB_1, PB_2, PB_10, PB_15, PB_11, PB_12, PB_13, PB_14};
// 1    2    3     4     5     6     7      8      9    10    11   12     13    14     15    16     17    18    19      20      21    22     23    24


byte fan_pwm[4] = {PB_14, PB_13, PB_12, PB_11};

byte output_led[4] = {PA_11, PA_10, PA_9, PA_8};

byte fan_enable[4] = {PB_6, PB_5, PA_5, PA_6};
const int buttonPin = PB_1;     // the number of the pushbutton pin
//const int fan_enable1 =  PB_6;     //pin 1
//const int fan_enable2 =  PB_5;     //pin 2
//const int fan_enable3 =  PA_5;      //pin 3
//const int fan_enable4 =  PA_6;      //pin 4

const int button_voltage =  PC_5; //pin 9

//const int led_1 = PA_11;
//const int led_2 = PA_10;
//const int led_3 = PA_9;
//const int led_4 = PA_8;



unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 70;




bool lastButtonState = 0;
bool buttonState;
bool tester_state = false;


bool fans1State = false;
bool fans2State = false;

int test_already_run = 0;

int period_fan1;

int fan1_rpm;
int fan2_rpm;
int fan3_rpm;
int fan4_rpm;


long long now_time;
long long measure_time;
long long passed_time;


int pulse_fan1;
int pulse_fan2;
int pulse_fan3;
int pulse_fan4;


int indicator_led = PA_12;





int fan1_pwm;
int pulse_high_fan1;
int pulse_low_fan1;



//void led_blink(int led_pin, int blink_times = 8);

void setup() {

  Serial.begin(115200);
  Serial.println("Card Started");

  for (int i = 0; i < 3; i++)
  {
    pinMode(fan_pwm[i], INPUT);
  }
  pinMode(button_voltage, OUTPUT);
  pinMode(output_led[0], OUTPUT);
  pinMode(output_led[1], OUTPUT);
  pinMode(output_led[2], OUTPUT);
  pinMode(output_led[3], OUTPUT);
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);
  digitalWrite(buttonPin, LOW);
  now_time = millis();

  measure_time = 1000;

  passed_time = 0;

  pulse_fan1 = 0;
  fan_sequence_pwm(0);
  leds_off();

  pinMode(indicator_led, OUTPUT);
  //  led_blink(PA_10, 10);
}



int fan_period(int n)
{
  int pulse_high_fan = pulseIn(n, HIGH); // epistrefei microseconds

  int pulse_low_fan = pulseIn(n, LOW); // epistrefei microseconds

  int fan_period = ((pulse_high_fan + pulse_low_fan) * 2) / 1000; // *2 epeidh einai 2 periodous h strofh toy fan, /1000 gia na ta kanoyme ms
  int rpm =  (60000 / fan_period);
  return rpm;
}


void rpm_comparison( )
{
  fan1_rpm = fan_period(fan_pwm[0]);
  fan2_rpm = fan_period(fan_pwm[1]);
  fan3_rpm = fan_period(fan_pwm[2]);
  fan4_rpm = fan_period(fan_pwm[3]);
  Serial.println(fan1_rpm);
  if (fan1_rpm == 0)
  {
    digitalWrite(output_led[0], HIGH);
  }
  if (fan1_rpm != 0)
  {
    digitalWrite(output_led[0], LOW);
  }
  Serial.println(fan2_rpm);
  if (fan2_rpm == 0)
  {
    digitalWrite(output_led[1], HIGH);
  }
  if (fan2_rpm != 0)
  {
    digitalWrite(output_led[1], LOW);
  }
  Serial.println(fan3_rpm);
  if (fan3_rpm == 0)
  {
    digitalWrite(output_led[2], HIGH);
  }
  if (fan3_rpm != 0)
  {
    digitalWrite(output_led[2], LOW);
  }
  Serial.println(fan4_rpm);
  if (fan4_rpm == 0)
  {
    digitalWrite(output_led[3], HIGH);
  }
  if (fan4_rpm != 0)
  {
    digitalWrite(output_led[3], LOW);
  }

}


void leds_off()
{
  int led_pin = 0;
  for (led_pin = 0; led_pin < 4; led_pin++)
  {
    digitalWrite(output_led[led_pin], HIGH);
  }
}


void button_read()
{
  int reading = digitalRead(buttonPin); //kanoyme sunexeia read tou pin
  //  Serial.print("Reading: ");
  //  Serial.println(reading);


  if (reading != lastButtonState) // lastButtonState πρώτη κατάσταση είναι 0, το έχουμε ορίσει παραπάνω
  {

    if ((millis() - lastDebounceTime) > debounceDelay)
    {

      //        Serial.println("LAST > NOW");
      buttonState = !buttonState;
      lastDebounceTime = millis();
      Serial.println(buttonState);
      // if the button state has changed:

      Serial.print("Button State : ");
      Serial.println(tester_state);
      // only toggle the LED if the new button state is HIGH
      if (buttonState == 1) {
        tester_state = !tester_state;
        Serial.print("Tester State: ");
        Serial.println(tester_state);
      }
      if (tester_state == 1)
      {


        fan_sequence_pwm(255);
        delay(5000);
        fan_sequence_pwm(100);



      }
      else
      {
        fan_sequence_pwm(0);
        test_already_run = 0;
        leds_off();
      }


    }
    lastButtonState = reading;
  }
}


void fan_sequence_pwm(int duty_cycle)
{
  int fan_pin = 0;
  for (fan_pin = 0; fan_pin < 4 ; fan_pin++)
  {
    analogWrite(fan_enable[fan_pin], duty_cycle);
  }
  Serial.print("FANS ON ");
  Serial.print(duty_cycle);
  Serial.println(" DUTY CYCLE");
}



void loop()
{
  // put your main code here, to run repeatedly:
  button_read();
  rpm_comparison();
}

