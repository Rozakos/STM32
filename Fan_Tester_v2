//byte pinMap[32] = {PA_11,PA_10,PA_9,PA_8,PC_9,PC_7,PC_6,PC_5,PB_0,PC_4,PC_3,PA_7,PA_6,PA_5,PB_5,PB_6,PB_14,PB_13,PB_12,PB_11,PB_15,PB_10,PB_2,PB_1};
//   1      2     3    4   5     6    7     8   9   10   11   12   13   14   15   16   17    18    19    20    21    22    23   24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44

//TO SWSTO BYTEMAP
byte pinMap[32] = {PB_6, PB_5, PA_5, PA_6, PA_7, PC_3, PC_4, PB_0, PC_5, PC_6, PC_7, PC_9, PA_8, PA_9, PA_10, PA_11, PB_1, PB_2, PB_10, PB_15, PB_11, PB_12, PB_13, PB_14};
// 1    2    3     4     5     6     7      8      9    10    11   12     13    14     15    16     17    18    19      20      21    22     23    24

const int buttonPin = PB_1;     // the number of the pushbutton pin
const int fan_enable1 =  PB_6;     //pin 1
const int fan_enable2 =  PB_5;     //pin 2
const int fan_enable3 =  PA_5;      //pin 3
const int fan_enable4 =  PA_6;      //pin 4
const int button_voltage =  PC_5; //pin 9
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;

bool lastButtonState = 0;
bool buttonState;
bool tester_state = false;


boolean fans1State = false;
boolean fans2State = false;


const int fan1_alarm = PB_14;

long long now_time;
long long measure_time;
long long passed_time;

int pulse_fan1;
int fan1_pwm;
int pulse_high_fan1;
int pulse_low_fan1;
int fan_period;
int indicator_led = PA_12;


void setup() {

  Serial.begin(115200);
  Serial.println("Card Started");
  // initialize the LED pin as an output:
  pinMode(fan1_alarm, INPUT_PULLUP);
  pinMode(fan_enable1, OUTPUT);
  pinMode(fan_enable2, OUTPUT);
  pinMode(fan_enable3, OUTPUT);
  pinMode(fan_enable4, OUTPUT);
  pinMode(button_voltage, OUTPUT);
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);
  digitalWrite(buttonPin, LOW);
  now_time = millis();
  measure_time = 1000;
  passed_time = 0;
  pulse_fan1 = 0;
  int fan1_pwm = 0;
  int pulse_high_fan1 = 0;
  int pulse_low_fan1 = 0;
  int fan_period = 0;
  pinMode(indicator_led, OUTPUT);
  //  fan_sequence();

}



void fan_sequence() {
  analogWrite(fan_enable1, 25);
  delay(1);
  analogWrite(fan_enable2, 100);
  delay(1);
  analogWrite(fan_enable3, 100);
  delay(1);
  analogWrite(fan_enable4, 100);
  Serial.println("FANS ON");
}

void fans_off() {
  analogWrite(fan_enable1, 0);
  analogWrite(fan_enable2, 0);
  analogWrite(fan_enable3, 0);
  analogWrite(fan_enable4, 0);
  Serial.println("FANS OFF");
}



void button_read()
{
  int reading = digitalRead(buttonPin);
  //  Serial.print("Reading: ");
  //  Serial.println(reading);



  if (reading != lastButtonState)
  {

    if ((millis() - lastDebounceTime) > debounceDelay) {

      //        Serial.println("LAST > NOW");
      buttonState = !buttonState;
      lastDebounceTime = millis();
      Serial.println(buttonState);
      // if the button state has changed:

      Serial.print("Button State : ");
      Serial.println(tester_state);
      // only toggle the LED if the new button state is HIGH
      if (buttonState == 1) {
        tester_state = !tester_state;
        Serial.print("Tester State: ");
        Serial.println(tester_state);
      }
      if (tester_state == 1)
      {
        fan_sequence();
      }
      else
      {
        fans_off();
      }


    }
    lastButtonState = reading;
  }
}





void loop() {
  button_read();

   if (millis() - passed_time > measure_time)
   {
      fan1_pwm = fan_period * 60;
      Serial.print("PWM : ");
      Serial.println(fan1_pwm);
      int led_status = digitalRead(indicator_led);
      digitalWrite(indicator_led, !led_status);
      passed_time = millis();
      Serial.print(pulse_low_fan1);
      Serial.println("   ");
      Serial.println(pulse_high_fan1);
      Serial.print("Input status: ");
      Serial.println(digitalRead(fan1_alarm));
   }
  
    pulse_high_fan1 = pulseIn(fan1_alarm, HIGH);
  
    pulse_low_fan1 = pulseIn(fan1_alarm, LOW);
  
    fan_period = (pulse_high_fan1 + pulse_low_fan1) * 2;


}
